  %0 = _x                                                                                                                 # EncryptedTensor<int7, shape=(1, 3, 224, 224)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_module.py:927
  %1 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 3, 230, 230)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
  %2 = -7                                                                                                                 # ClearScalar<int4>                                      ∈ [-7, -7]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
  %3 = multiply(%1, %2)                                                                                                   # EncryptedTensor<int4, shape=(1, 3, 230, 230)>          ∈ [-7, -7]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
  %4 = (%3[:, :, 3:227, 3:227] = %0)                                                                                      # EncryptedTensor<int7, shape=(1, 3, 230, 230)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
  %5 = [[[[  0    ... -2  -2]]]]                                                                                          # ClearTensor<int7, shape=(64, 3, 7, 7)>                 ∈ [-49, 63]              @ /conv1/Conv.conv                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
  %6 = conv2d(%4, %5, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)            # EncryptedTensor<int16, shape=(1, 64, 112, 112)>        ∈ [-14665, 17602]        @ /conv1/Conv.conv                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
  %7 = round_bit_pattern(%6, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)                # EncryptedTensor<int16, shape=(1, 64, 112, 112)>        ∈ [-14848, 17408]        @ /conv1/Conv.conv_rounding                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
  %8 = subgraph(%7)                                                                                                       # EncryptedTensor<uint7, shape=(1, 64, 112, 112)>        ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
  %9 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 64, 114, 114)>        ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %10 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %11 = multiply(%9, %10)                                                                                                  # EncryptedTensor<uint1, shape=(1, 64, 114, 114)>        ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %12 = (%11[:, :, 1:113, 1:113] = %8)                                                                                     # EncryptedTensor<uint7, shape=(1, 64, 114, 114)>        ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %13 = maxpool2d(%12, kernel_shape=(3, 3), strides=(2, 2), pads=(0, 0, 0, 0), dilations=(1, 1), ceil_mode=False)          # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1340
 %14 = subgraph(%13)                                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %15 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %16 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %17 = multiply(%15, %16)                                                                                                 # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %18 = (%17[:, :, 1:57, 1:57] = %14)                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 58, 58)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %19 = [[[[  5  - ... -1  -7]]]]                                                                                          # ClearTensor<int7, shape=(64, 64, 3, 3)>                ∈ [-63, 54]              @ /layer1/layer1.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %20 = conv2d(%18, %19, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int16, shape=(1, 64, 56, 56)>          ∈ [-18722, 10477]        @ /layer1/layer1.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %21 = round_bit_pattern(%20, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int16, shape=(1, 64, 56, 56)>          ∈ [-18944, 10240]        @ /layer1/layer1.0/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %22 = subgraph(%21)                                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %23 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %24 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %25 = multiply(%23, %24)                                                                                                 # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %26 = (%25[:, :, 1:57, 1:57] = %22)                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 58, 58)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %27 = [[[[  2  - ... -6  -1]]]]                                                                                          # ClearTensor<int7, shape=(64, 64, 3, 3)>                ∈ [-63, 43]              @ /layer1/layer1.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %28 = conv2d(%26, %27, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int15, shape=(1, 64, 56, 56)>          ∈ [-14225, 12056]        @ /layer1/layer1.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %29 = round_bit_pattern(%28, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int15, shape=(1, 64, 56, 56)>          ∈ [-14336, 12032]        @ /layer1/layer1.0/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %30 = subgraph(%29)                                                                                                      # EncryptedTensor<int7, shape=(1, 64, 56, 56)>           ∈ [-63, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %31 = subgraph(%13)                                                                                                      # EncryptedTensor<int7, shape=(1, 64, 56, 56)>           ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %32 = subgraph(%30)                                                                                                      # EncryptedTensor<int9, shape=(1, 64, 56, 56)>           ∈ [-214, 155]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %33 = subgraph(%31)                                                                                                      # EncryptedTensor<uint9, shape=(1, 64, 56, 56)>          ∈ [0, 284]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %34 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %35 = multiply(%34, %33)                                                                                                 # EncryptedTensor<uint9, shape=(1, 64, 56, 56)>          ∈ [0, 284]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %36 = add(%32, %35)                                                                                                      # EncryptedTensor<int10, shape=(1, 64, 56, 56)>          ∈ [-214, 293]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %37 = subgraph(%36)                                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 126]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %38 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %39 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %40 = multiply(%38, %39)                                                                                                 # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %41 = (%40[:, :, 1:57, 1:57] = %37)                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 58, 58)>          ∈ [0, 126]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %42 = [[[[  2  - ...  3 -10]]]]                                                                                          # ClearTensor<int7, shape=(64, 64, 3, 3)>                ∈ [-58, 63]              @ /layer1/layer1.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %43 = conv2d(%41, %42, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int16, shape=(1, 64, 56, 56)>          ∈ [-26228, 11872]        @ /layer1/layer1.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %44 = round_bit_pattern(%43, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int16, shape=(1, 64, 56, 56)>          ∈ [-26112, 11776]        @ /layer1/layer1.1/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %45 = subgraph(%44)                                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %46 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %47 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %48 = multiply(%46, %47)                                                                                                 # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %49 = (%48[:, :, 1:57, 1:57] = %45)                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 58, 58)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %50 = [[[[ -1    ... 20   6]]]]                                                                                          # ClearTensor<int7, shape=(64, 64, 3, 3)>                ∈ [-63, 49]              @ /layer1/layer1.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %51 = conv2d(%49, %50, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int16, shape=(1, 64, 56, 56)>          ∈ [-17150, 14350]        @ /layer1/layer1.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %52 = round_bit_pattern(%51, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int16, shape=(1, 64, 56, 56)>          ∈ [-16896, 14336]        @ /layer1/layer1.1/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %53 = subgraph(%52)                                                                                                      # EncryptedTensor<int7, shape=(1, 64, 56, 56)>           ∈ [-62, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %54 = subgraph(%36)                                                                                                      # EncryptedTensor<int7, shape=(1, 64, 56, 56)>           ∈ [-64, 62]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %55 = subgraph(%53)                                                                                                      # EncryptedTensor<int9, shape=(1, 64, 56, 56)>           ∈ [-186, 161]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %56 = subgraph(%54)                                                                                                      # EncryptedTensor<uint9, shape=(1, 64, 56, 56)>          ∈ [0, 282]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %57 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %58 = multiply(%57, %56)                                                                                                 # EncryptedTensor<uint9, shape=(1, 64, 56, 56)>          ∈ [0, 282]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %59 = add(%55, %58)                                                                                                      # EncryptedTensor<int10, shape=(1, 64, 56, 56)>          ∈ [-186, 321]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %60 = subgraph(%59)                                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %61 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %62 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %63 = multiply(%61, %62)                                                                                                 # EncryptedTensor<uint1, shape=(1, 64, 58, 58)>          ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %64 = (%63[:, :, 1:57, 1:57] = %60)                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 58, 58)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %65 = [[[[ -9 -1 ... -6   6]]]]                                                                                          # ClearTensor<int7, shape=(128, 64, 3, 3)>               ∈ [-44, 63]              @ /layer2/layer2.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %66 = conv2d(%64, %65, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)          # EncryptedTensor<int15, shape=(1, 128, 28, 28)>         ∈ [-13629, 11353]        @ /layer2/layer2.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %67 = round_bit_pattern(%66, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int15, shape=(1, 128, 28, 28)>         ∈ [-13568, 11264]        @ /layer2/layer2.0/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %68 = subgraph(%67)                                                                                                      # EncryptedTensor<uint7, shape=(1, 128, 28, 28)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %69 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %70 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %71 = multiply(%69, %70)                                                                                                 # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %72 = (%71[:, :, 1:29, 1:29] = %68)                                                                                      # EncryptedTensor<uint7, shape=(1, 128, 30, 30)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %73 = [[[[  0  - ... -1   1]]]]                                                                                          # ClearTensor<int7, shape=(128, 128, 3, 3)>              ∈ [-43, 63]              @ /layer2/layer2.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %74 = conv2d(%72, %73, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int16, shape=(1, 128, 28, 28)>         ∈ [-22397, 16299]        @ /layer2/layer2.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %75 = round_bit_pattern(%74, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int16, shape=(1, 128, 28, 28)>         ∈ [-22528, 16384]        @ /layer2/layer2.0/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %76 = subgraph(%59)                                                                                                      # EncryptedTensor<uint7, shape=(1, 64, 56, 56)>          ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %77 = [[[[  1]]  ...  [[  2]]]]                                                                                          # ClearTensor<int7, shape=(128, 64, 1, 1)>               ∈ [-52, 63]              @ /layer2/layer2.0/downsample/downsample.0/Conv.conv                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %78 = conv2d(%76, %77, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)          # EncryptedTensor<int14, shape=(1, 128, 28, 28)>         ∈ [-7342, 6678]          @ /layer2/layer2.0/downsample/downsample.0/Conv.conv                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %79 = round_bit_pattern(%78, lsbs_to_remove=7, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int14, shape=(1, 128, 28, 28)>         ∈ [-7296, 6656]          @ /layer2/layer2.0/downsample/downsample.0/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %80 = subgraph(%75)                                                                                                      # EncryptedTensor<int7, shape=(1, 128, 28, 28)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %81 = subgraph(%79)                                                                                                      # EncryptedTensor<int7, shape=(1, 128, 28, 28)>          ∈ [-63, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %82 = subgraph(%80)                                                                                                      # EncryptedTensor<int9, shape=(1, 128, 28, 28)>          ∈ [-169, 208]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %83 = subgraph(%81)                                                                                                      # EncryptedTensor<int10, shape=(1, 128, 28, 28)>         ∈ [-260, 214]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %84 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %85 = multiply(%84, %83)                                                                                                 # EncryptedTensor<int10, shape=(1, 128, 28, 28)>         ∈ [-260, 214]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %86 = add(%82, %85)                                                                                                      # EncryptedTensor<int10, shape=(1, 128, 28, 28)>         ∈ [-260, 256]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
 %87 = subgraph(%86)                                                                                                      # EncryptedTensor<uint7, shape=(1, 128, 28, 28)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %88 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %89 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %90 = multiply(%88, %89)                                                                                                 # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %91 = (%90[:, :, 1:29, 1:29] = %87)                                                                                      # EncryptedTensor<uint7, shape=(1, 128, 30, 30)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
 %92 = [[[[  0  - ... -1  -2]]]]                                                                                          # ClearTensor<int7, shape=(128, 128, 3, 3)>              ∈ [-57, 63]              @ /layer2/layer2.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %93 = conv2d(%91, %92, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int16, shape=(1, 128, 28, 28)>         ∈ [-20256, 14651]        @ /layer2/layer2.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
 %94 = round_bit_pattern(%93, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)               # EncryptedTensor<int16, shape=(1, 128, 28, 28)>         ∈ [-20480, 14848]        @ /layer2/layer2.1/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
 %95 = subgraph(%94)                                                                                                      # EncryptedTensor<uint7, shape=(1, 128, 28, 28)>         ∈ [0, 123]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
 %96 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %97 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %98 = multiply(%96, %97)                                                                                                 # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
 %99 = (%98[:, :, 1:29, 1:29] = %95)                                                                                      # EncryptedTensor<uint7, shape=(1, 128, 30, 30)>         ∈ [0, 123]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%100 = [[[[ -1    ... -3  -6]]]]                                                                                          # ClearTensor<int7, shape=(128, 128, 3, 3)>              ∈ [-63, 43]              @ /layer2/layer2.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%101 = conv2d(%99, %100, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)         # EncryptedTensor<int16, shape=(1, 128, 28, 28)>         ∈ [-15823, 17068]        @ /layer2/layer2.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%102 = round_bit_pattern(%101, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int16, shape=(1, 128, 28, 28)>         ∈ [-15872, 16896]        @ /layer2/layer2.1/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%103 = subgraph(%102)                                                                                                     # EncryptedTensor<int7, shape=(1, 128, 28, 28)>          ∈ [-60, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%104 = subgraph(%86)                                                                                                      # EncryptedTensor<int7, shape=(1, 128, 28, 28)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%105 = subgraph(%103)                                                                                                     # EncryptedTensor<int9, shape=(1, 128, 28, 28)>          ∈ [-168, 176]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%106 = subgraph(%104)                                                                                                     # EncryptedTensor<uint8, shape=(1, 128, 28, 28)>         ∈ [0, 205]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%107 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%108 = multiply(%107, %106)                                                                                               # EncryptedTensor<uint8, shape=(1, 128, 28, 28)>         ∈ [0, 205]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%109 = add(%105, %108)                                                                                                    # EncryptedTensor<int10, shape=(1, 128, 28, 28)>         ∈ [-168, 330]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%110 = subgraph(%109)                                                                                                     # EncryptedTensor<uint7, shape=(1, 128, 28, 28)>         ∈ [0, 125]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%111 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%112 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%113 = multiply(%111, %112)                                                                                               # EncryptedTensor<uint1, shape=(1, 128, 30, 30)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%114 = (%113[:, :, 1:29, 1:29] = %110)                                                                                    # EncryptedTensor<uint7, shape=(1, 128, 30, 30)>         ∈ [0, 125]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%115 = [[[[ -2  - ... -1  -2]]]]                                                                                          # ClearTensor<int7, shape=(256, 128, 3, 3)>              ∈ [-50, 63]              @ /layer3/layer3.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%116 = conv2d(%114, %115, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<int16, shape=(1, 256, 14, 14)>         ∈ [-12401, 16474]        @ /layer3/layer3.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%117 = round_bit_pattern(%116, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int16, shape=(1, 256, 14, 14)>         ∈ [-12288, 16384]        @ /layer3/layer3.0/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%118 = subgraph(%117)                                                                                                     # EncryptedTensor<uint7, shape=(1, 256, 14, 14)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%119 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%120 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%121 = multiply(%119, %120)                                                                                               # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%122 = (%121[:, :, 1:15, 1:15] = %118)                                                                                    # EncryptedTensor<uint7, shape=(1, 256, 16, 16)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%123 = [[[[-1 -4  ...  -2 -4]]]]                                                                                          # ClearTensor<int7, shape=(256, 256, 3, 3)>              ∈ [-41, 63]              @ /layer3/layer3.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%124 = conv2d(%122, %123, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int16, shape=(1, 256, 14, 14)>         ∈ [-13084, 25930]        @ /layer3/layer3.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%125 = round_bit_pattern(%124, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int16, shape=(1, 256, 14, 14)>         ∈ [-13312, 26112]        @ /layer3/layer3.0/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%126 = subgraph(%109)                                                                                                     # EncryptedTensor<uint7, shape=(1, 128, 28, 28)>         ∈ [0, 125]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%127 = [[[[ 1]]   ...   [[ 1]]]]                                                                                          # ClearTensor<int7, shape=(256, 128, 1, 1)>              ∈ [-63, 50]              @ /layer3/layer3.0/downsample/downsample.0/Conv.conv                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%128 = conv2d(%126, %127, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<int14, shape=(1, 256, 14, 14)>         ∈ [-4596, 3135]          @ /layer3/layer3.0/downsample/downsample.0/Conv.conv                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%129 = round_bit_pattern(%128, lsbs_to_remove=7, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int14, shape=(1, 256, 14, 14)>         ∈ [-4608, 3072]          @ /layer3/layer3.0/downsample/downsample.0/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%130 = subgraph(%125)                                                                                                     # EncryptedTensor<int7, shape=(1, 256, 14, 14)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%131 = subgraph(%129)                                                                                                     # EncryptedTensor<int7, shape=(1, 256, 14, 14)>          ∈ [-64, 62]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%132 = subgraph(%130)                                                                                                     # EncryptedTensor<int10, shape=(1, 256, 14, 14)>         ∈ [-159, 359]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%133 = subgraph(%131)                                                                                                     # EncryptedTensor<int8, shape=(1, 256, 14, 14)>          ∈ [-104, 47]                                                                                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%134 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%135 = multiply(%134, %133)                                                                                               # EncryptedTensor<int8, shape=(1, 256, 14, 14)>          ∈ [-104, 47]                                                                                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%136 = add(%132, %135)                                                                                                    # EncryptedTensor<int10, shape=(1, 256, 14, 14)>         ∈ [-198, 326]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%137 = subgraph(%136)                                                                                                     # EncryptedTensor<uint7, shape=(1, 256, 14, 14)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%138 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%139 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%140 = multiply(%138, %139)                                                                                               # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%141 = (%140[:, :, 1:15, 1:15] = %137)                                                                                    # EncryptedTensor<uint7, shape=(1, 256, 16, 16)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%142 = [[[[ 6  6  ...   0  3]]]]                                                                                          # ClearTensor<int7, shape=(256, 256, 3, 3)>              ∈ [-50, 63]              @ /layer3/layer3.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%143 = conv2d(%141, %142, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int16, shape=(1, 256, 14, 14)>         ∈ [-16362, 17066]        @ /layer3/layer3.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%144 = round_bit_pattern(%143, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int16, shape=(1, 256, 14, 14)>         ∈ [-16384, 17152]        @ /layer3/layer3.1/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%145 = subgraph(%144)                                                                                                     # EncryptedTensor<uint7, shape=(1, 256, 14, 14)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%146 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%147 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%148 = multiply(%146, %147)                                                                                               # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%149 = (%148[:, :, 1:15, 1:15] = %145)                                                                                    # EncryptedTensor<uint7, shape=(1, 256, 16, 16)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%150 = [[[[-4 -2  ...  -7 -4]]]]                                                                                          # ClearTensor<int7, shape=(256, 256, 3, 3)>              ∈ [-63, 50]              @ /layer3/layer3.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%151 = conv2d(%149, %150, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int15, shape=(1, 256, 14, 14)>         ∈ [-13559, 8953]         @ /layer3/layer3.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%152 = round_bit_pattern(%151, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int15, shape=(1, 256, 14, 14)>         ∈ [-13568, 8960]         @ /layer3/layer3.1/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%153 = subgraph(%152)                                                                                                     # EncryptedTensor<int7, shape=(1, 256, 14, 14)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%154 = subgraph(%136)                                                                                                     # EncryptedTensor<int7, shape=(1, 256, 14, 14)>          ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%155 = subgraph(%153)                                                                                                     # EncryptedTensor<int10, shape=(1, 256, 14, 14)>         ∈ [-261, 199]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%156 = subgraph(%154)                                                                                                     # EncryptedTensor<uint9, shape=(1, 256, 14, 14)>         ∈ [0, 355]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%157 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%158 = multiply(%157, %156)                                                                                               # EncryptedTensor<uint9, shape=(1, 256, 14, 14)>         ∈ [0, 355]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%159 = add(%155, %158)                                                                                                    # EncryptedTensor<int10, shape=(1, 256, 14, 14)>         ∈ [-236, 303]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%160 = subgraph(%159)                                                                                                     # EncryptedTensor<uint7, shape=(1, 256, 14, 14)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%161 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%162 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%163 = multiply(%161, %162)                                                                                               # EncryptedTensor<uint1, shape=(1, 256, 16, 16)>         ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%164 = (%163[:, :, 1:15, 1:15] = %160)                                                                                    # EncryptedTensor<uint7, shape=(1, 256, 16, 16)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%165 = [[[[-2 -3  ...   3  0]]]]                                                                                          # ClearTensor<int7, shape=(512, 256, 3, 3)>              ∈ [-32, 63]              @ /layer4/layer4.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%166 = conv2d(%164, %165, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<int15, shape=(1, 512, 7, 7)>           ∈ [-15269, 15869]        @ /layer4/layer4.0/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%167 = round_bit_pattern(%166, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int15, shape=(1, 512, 7, 7)>           ∈ [-15360, 15872]        @ /layer4/layer4.0/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%168 = subgraph(%167)                                                                                                     # EncryptedTensor<uint7, shape=(1, 512, 7, 7)>           ∈ [0, 125]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%169 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 512, 9, 9)>           ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%170 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%171 = multiply(%169, %170)                                                                                               # EncryptedTensor<uint1, shape=(1, 512, 9, 9)>           ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%172 = (%171[:, :, 1:8, 1:8] = %168)                                                                                      # EncryptedTensor<uint7, shape=(1, 512, 9, 9)>           ∈ [0, 125]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%173 = [[[[  0  - ...  0   2]]]]                                                                                          # ClearTensor<int7, shape=(512, 512, 3, 3)>              ∈ [-37, 63]              @ /layer4/layer4.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%174 = conv2d(%172, %173, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int15, shape=(1, 512, 7, 7)>           ∈ [-12177, 10195]        @ /layer4/layer4.0/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%175 = round_bit_pattern(%174, lsbs_to_remove=8, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int15, shape=(1, 512, 7, 7)>           ∈ [-12288, 10240]        @ /layer4/layer4.0/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%176 = subgraph(%159)                                                                                                     # EncryptedTensor<uint7, shape=(1, 256, 14, 14)>         ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%177 = [[[[ 0]]   ...   [[-1]]]]                                                                                          # ClearTensor<int7, shape=(512, 256, 1, 1)>              ∈ [-50, 63]              @ /layer4/layer4.0/downsample/downsample.0/Conv.conv                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%178 = conv2d(%176, %177, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<int14, shape=(1, 512, 7, 7)>           ∈ [-6385, 7272]          @ /layer4/layer4.0/downsample/downsample.0/Conv.conv                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%179 = round_bit_pattern(%178, lsbs_to_remove=7, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int14, shape=(1, 512, 7, 7)>           ∈ [-6400, 7296]          @ /layer4/layer4.0/downsample/downsample.0/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%180 = subgraph(%175)                                                                                                     # EncryptedTensor<int7, shape=(1, 512, 7, 7)>            ∈ [-59, 62]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%181 = subgraph(%179)                                                                                                     # EncryptedTensor<int7, shape=(1, 512, 7, 7)>            ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%182 = subgraph(%180)                                                                                                     # EncryptedTensor<int9, shape=(1, 512, 7, 7)>            ∈ [-178, 169]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%183 = subgraph(%181)                                                                                                     # EncryptedTensor<int9, shape=(1, 512, 7, 7)>            ∈ [-178, 181]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%184 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%185 = multiply(%184, %183)                                                                                               # EncryptedTensor<int9, shape=(1, 512, 7, 7)>            ∈ [-178, 181]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%186 = add(%182, %185)                                                                                                    # EncryptedTensor<int10, shape=(1, 512, 7, 7)>           ∈ [-223, 281]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%187 = subgraph(%186)                                                                                                     # EncryptedTensor<uint7, shape=(1, 512, 7, 7)>           ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%188 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 512, 9, 9)>           ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%189 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%190 = multiply(%188, %189)                                                                                               # EncryptedTensor<uint1, shape=(1, 512, 9, 9)>           ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%191 = (%190[:, :, 1:8, 1:8] = %187)                                                                                      # EncryptedTensor<uint7, shape=(1, 512, 9, 9)>           ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%192 = [[[[-1 -1  ...   0 -1]]]]                                                                                          # ClearTensor<int7, shape=(512, 512, 3, 3)>              ∈ [-38, 63]              @ /layer4/layer4.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%193 = conv2d(%191, %192, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int16, shape=(1, 512, 7, 7)>           ∈ [-18711, 8830]         @ /layer4/layer4.1/conv1/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%194 = round_bit_pattern(%193, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int16, shape=(1, 512, 7, 7)>           ∈ [-18944, 8704]         @ /layer4/layer4.1/conv1/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%195 = subgraph(%194)                                                                                                     # EncryptedTensor<uint7, shape=(1, 512, 7, 7)>           ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%196 = ones()                                                                                                             # EncryptedTensor<uint1, shape=(1, 512, 9, 9)>           ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%197 = 0                                                                                                                  # ClearScalar<uint1>                                     ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%198 = multiply(%196, %197)                                                                                               # EncryptedTensor<uint1, shape=(1, 512, 9, 9)>           ∈ [0, 0]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:56
%199 = (%198[:, :, 1:8, 1:8] = %195)                                                                                      # EncryptedTensor<uint7, shape=(1, 512, 9, 9)>           ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/onnx_impl_utils.py:70
%200 = [[[[  0    ...  2   1]]]]                                                                                          # ClearTensor<int7, shape=(512, 512, 3, 3)>              ∈ [-40, 63]              @ /layer4/layer4.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%201 = conv2d(%199, %200, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int16, shape=(1, 512, 7, 7)>           ∈ [-15743, 27850]        @ /layer4/layer4.1/conv2/Conv.conv                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:957
%202 = round_bit_pattern(%201, lsbs_to_remove=9, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<int16, shape=(1, 512, 7, 7)>           ∈ [-15872, 27648]        @ /layer4/layer4.1/conv2/Conv.conv_rounding                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%203 = subgraph(%202)                                                                                                     # EncryptedTensor<int7, shape=(1, 512, 7, 7)>            ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%204 = subgraph(%186)                                                                                                     # EncryptedTensor<int7, shape=(1, 512, 7, 7)>            ∈ [-64, 63]                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%205 = subgraph(%203)                                                                                                     # EncryptedTensor<int10, shape=(1, 512, 7, 7)>           ∈ [-144, 303]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%206 = subgraph(%204)                                                                                                     # EncryptedTensor<uint7, shape=(1, 512, 7, 7)>           ∈ [0, 69]                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%207 = 1                                                                                                                  # ClearScalar<uint1>                                     ∈ [1, 1]                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%208 = multiply(%207, %206)                                                                                               # EncryptedTensor<uint7, shape=(1, 512, 7, 7)>           ∈ [0, 69]                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%209 = add(%205, %208)                                                                                                    # EncryptedTensor<int10, shape=(1, 512, 7, 7)>           ∈ [-144, 372]                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
%210 = subgraph(%209)                                                                                                     # EncryptedTensor<uint7, shape=(1, 512, 7, 7)>           ∈ [0, 127]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%211 = [[[[1 1 1  ...  1 1 1]]]]                                                                                          # ClearTensor<uint1, shape=(512, 512, 7, 7)>             ∈ [0, 1]                 @ /avgpool/AveragePool.avgpool                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1223
%212 = conv2d(%210, %211, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<uint11, shape=(1, 512, 1, 1)>          ∈ [0, 1752]              @ /avgpool/AveragePool.avgpool                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1223
%213 = round_bit_pattern(%212, lsbs_to_remove=4, overflow_protection=False, exactness=Exactness.APPROXIMATE)              # EncryptedTensor<uint11, shape=(1, 512, 1, 1)>          ∈ [0, 1760]              @ /avgpool/AveragePool.avgpool_rounding                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
%214 = subgraph(%213)                                                                                                     # EncryptedTensor<uint9, shape=(1, 512, 1, 1)>           ∈ [0, 505]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%215 = reshape(%214, newshape=(1, 512))                                                                                   # EncryptedTensor<uint9, shape=(1, 512)>                 ∈ [0, 505]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:2025
%216 = subgraph(%215)                                                                                                     # EncryptedTensor<uint7, shape=(1, 512)>                 ∈ [0, 126]                                                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
%217 = [[ 63 -29] ... [ 62  48]]                                                                                          # ClearTensor<int7, shape=(512, 2)>                      ∈ [-63, 63]              @ /fc/Gemm.matmul                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:385
%218 = matmul(%216, %217)                                                                                                 # EncryptedTensor<int17, shape=(1, 2)>                   ∈ [-10929, 38950]        @ /fc/Gemm.matmul                                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:385
return %218

Subgraphs:

    %8 = subgraph(%7):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 112, 112)>          @ /conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[ -77]] ... [[  42]]]]        # ClearTensor<int10, shape=(1, 64, 1, 1)>                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.0002707848602711359            # ClearScalar<float64>                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 2.279 ... 65e-01]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.038912983702614194             # ClearScalar<float64>                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 112, 112)>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 112, 112)>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %14 = subgraph(%13):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1340
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1352
         %2 = 0                                # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1352
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1352
         %4 = 0.038912983702614194             # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1351
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1351
         %6 = 0.038912983391228624             # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = 0                                # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = 0                                # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %12 = 127                              # ClearScalar<uint7>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %14

    %22 = subgraph(%21):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>          @ /layer1/layer1.0/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00024414217652328897           # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.358 ... 47275 ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.020693893311872484             # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %30 = subgraph(%29):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>          @ /layer1/layer1.0/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.0002557709893041563            # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.090 ... 570036]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.050968995641001935             # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 10                               # ClearScalar<uint4>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %31 = subgraph(%13):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1340
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1352
         %2 = 0                                # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1352
         %3 = subtract(%1, %2)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1352
         %4 = 0.038912983702614194             # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1351
         %5 = multiply(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1351
         %6 = 0.038912983391228624             # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = divide(%5, %6)                   # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = -64                              # ClearScalar<int7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = rint(%9)                         # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = -64                              # ClearScalar<int7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %12 = 63                               # ClearScalar<uint6>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = clip(%10, %11, %12)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = astype(%13, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %14

    %32 = subgraph(%30):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 10.0                          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.050968995641001935          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.017394780583068557          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %33 = subgraph(%31):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -64.0                         # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.038912983391228624          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.017394780583068557          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %37 = subgraph(%36):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.017394780583068557           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.04040519899216712            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %45 = subgraph(%44):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>          @ /layer1/layer1.1/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00018934154723844327           # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.208 ... 756634]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.014329289264254384             # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %53 = subgraph(%52):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>          @ /layer1/layer1.1/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00023081600294925868           # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-0.113 ... 005134]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.05019192917390893              # ClearScalar<float64>                                                                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 5                                # ClearScalar<uint3>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %54 = subgraph(%36):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.017394780583068557           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.04040519899216712            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = -64                            # ClearScalar<int7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -64                            # ClearScalar<int7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 63                             # ClearScalar<uint6>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %55 = subgraph(%53):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 5.0                           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.05019192917390893           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.018067285137048732          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %56 = subgraph(%54):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -64.0                         # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.04040519899216712           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.018067285137048732          # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %60 = subgraph(%59):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.018067285137048732           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.04552386806185508            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %68 = subgraph(%67):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>          @ /layer2/layer2.0/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00015793097805850083           # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-1.300 ... 48e-02]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.013361756427176349             # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %76 = subgraph(%59):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.018067285137048732           # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.04552386806185508            # ClearScalar<float64>                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 64, 56, 56)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 56, 56)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %80 = subgraph(%75):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>          @ /layer2/layer2.0/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00015420306856852532           # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.330 ... 289676]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.03933922955766876              # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -7                               # ClearScalar<int4>                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %81 = subgraph(%79):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>          @ /layer2/layer2.0/downsample/downsample.0/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00048530128606280863           # ClearScalar<float64>                                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.188 ... 584375]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.0498647218640585               # ClearScalar<float64>                                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 6                                # ClearScalar<uint3>                                                                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %82 = subgraph(%80):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -7.0                          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.03933922955766876           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.01325398781305939           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %83 = subgraph(%81):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 6.0                           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.0498647218640585            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.01325398781305939           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %87 = subgraph(%86):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.01325398781305939            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.026403613517354534           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %95 = subgraph(%94):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>          @ /layer2/layer2.1/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00012767415201822262           # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 6.820 ... 28e-01]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.015242523420968738             # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %103 = subgraph(%102):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>          @ /layer2/layer2.1/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.0002155959271612131            # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-0.114 ... 263559]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.045671431182045245             # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %104 = subgraph(%86):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.01325398781305939            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.026403613517354534           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = -64                            # ClearScalar<int7>                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -64                            # ClearScalar<int7>                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 63                             # ClearScalar<uint6>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %105 = subgraph(%103):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 0.0                           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.045671431182045245          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.016328576742999125          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %106 = subgraph(%104):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -64.0                         # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.026403613517354534          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.016328576742999125          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %110 = subgraph(%109):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.016328576742999125           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.04320001406021816            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %118 = subgraph(%117):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>          @ /layer3/layer3.0/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00016593807716600083           # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-0.023 ... 347786]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.021954037803375088             # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %126 = subgraph(%109):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.016328576742999125           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.04320001406021816            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 128, 28, 28)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 128, 28, 28)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %130 = subgraph(%125):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>          @ /layer3/layer3.0/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00019901953883390446           # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 1.702 ... 41e-01]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.05500180654673624              # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -25                              # ClearScalar<int6>                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %131 = subgraph(%129):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>          @ /layer3/layer3.0/downsample/downsample.0/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00027700991109594634           # ClearScalar<float64>                                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 3.779 ... 61e-03]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.0160905097847281               # ClearScalar<float64>                                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 23                               # ClearScalar<uint5>                                                                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %132 = subgraph(%130):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -25.0                         # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.05500180654673624           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.013493567631058427          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %133 = subgraph(%131):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 23.0                          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.0160905097847281            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.013493567631058427          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %137 = subgraph(%136):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.013493567631058427           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.03389329192368219            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %145 = subgraph(%144):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>          @ /layer3/layer3.1/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00015058100960111694           # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-0.076 ... 243168]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.016127965742414187             # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %153 = subgraph(%152):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>          @ /layer3/layer3.1/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.0002522672253869371            # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 1.076 ... 97e-02]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.043845814650960026             # ClearScalar<float64>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 8                                # ClearScalar<uint4>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %154 = subgraph(%136):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.013493567631058427           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.03389329192368219            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = -64                            # ClearScalar<int7>                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -64                            # ClearScalar<int7>                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 63                             # ClearScalar<uint6>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %155 = subgraph(%153):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 8.0                           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.043845814650960026          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.012114757474562284          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %156 = subgraph(%154):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -64.0                         # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.03389329192368219           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.012114757474562284          # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %160 = subgraph(%159):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.012114757474562284           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.027186660474411425           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %168 = subgraph(%167):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>          @ /layer4/layer4.0/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 512, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00012880130961332676           # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-1.131 ... 83e-01]]]]        # ClearTensor<float32, shape=(1, 512, 1, 1)>                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.013156192098438872             # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %176 = subgraph(%159):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.012114757474562284           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.027186660474411425           # ClearScalar<float64>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                              /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 256, 14, 14)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 256, 14, 14)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %180 = subgraph(%175):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>          @ /layer4/layer4.0/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 512, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00024516308223845895           # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 4.953 ... 39e-01]]]]        # ClearTensor<float32, shape=(1, 512, 1, 1)>                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.0416879680657964               # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 3                                # ClearScalar<uint2>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %181 = subgraph(%179):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>          @ /layer4/layer4.0/downsample/downsample.0/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 512, 1, 1)>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00045319123824826105           # ClearScalar<float64>                                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[-2.959 ... 99e-01]]]]        # ClearTensor<float32, shape=(1, 512, 1, 1)>                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.0409400248034907               # ClearScalar<float64>                                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -1                               # ClearScalar<int1>                                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %182 = subgraph(%180):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = 3.0                           # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.0416879680657964            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.014514632590666059          # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %183 = subgraph(%181):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -1.0                          # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.0409400248034907            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.014514632590666059          # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %187 = subgraph(%186):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.014514632590666059           # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.0322293416580144             # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %195 = subgraph(%194):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>          @ /layer4/layer4.1/conv1/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 512, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.00015431236372608694           # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.252 ... 156746]]]]        # ClearTensor<float32, shape=(1, 512, 1, 1)>                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %11 = maximum(%9, %10)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
        %12 = 0.010604019251829262             # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %17 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = 127                              # ClearScalar<uint7>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %20

    %203 = subgraph(%202):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>          @ /layer4/layer4.1/conv2/Conv.conv_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %2 = 0                                # ClearScalar<uint1>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 512, 1, 1)>                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1063
         %6 = 0.0006379586375685723            # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1066
         %8 = [[[[ 0.428 ... 419093]]]]        # ClearTensor<float32, shape=(1, 512, 1, 1)>                                                               /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1071
        %10 = 0.2097159261730614               # ClearScalar<float64>                                                                                     /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -23                              # ClearScalar<int6>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %15 = -64                              # ClearScalar<int7>                                                                                        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = 63                               # ClearScalar<uint6>                                                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                                                           /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %18

    %204 = subgraph(%186):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.014514632590666059           # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.0322293416580144             # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = -64                            # ClearScalar<int7>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = -64                            # ClearScalar<int7>                                             /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 63                             # ClearScalar<uint6>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %205 = subgraph(%203):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -23.0                         # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.2097159261730614            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.05962121940906105           # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %206 = subgraph(%204):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
         %1 = -64.0                         # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.0322293416580144            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.05962121940906105           # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                             # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %10

    %210 = subgraph(%209):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:660
         %1 = 0.0                            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.05962121940906105            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %6 = maximum(%4, %5)                # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/onnx/ops_impl.py:330
         %7 = 0.17276069876011393            # ClearScalar<float64>                                          /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = divide(%6, %7)                 # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = add(%8, %9)                    # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = rint(%10)                      # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = 0                              # ClearScalar<uint1>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = 127                            # ClearScalar<uint7>                                            /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = clip(%11, %12, %13)            # EncryptedTensor<float64, shape=(1, 512, 7, 7)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = astype(%14, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512, 7, 7)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %15

    %214 = subgraph(%213):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 512, 1, 1)>          @ /avgpool/AveragePool.avgpool_rounding        /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/base_quantized_op.py:1063
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1234
         %2 = 0.02040816326530612              # ClearScalar<float64>                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1234
         %3 = multiply(%1, %2)                 # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1234
         %4 = 0                                # ClearScalar<uint1>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1234
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1234
         %6 = 0.17276069876011393              # ClearScalar<float64>                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1233
         %7 = multiply(%5, %6)                 # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:1233
         %8 = 0.012284751328555004             # ClearScalar<float64>                                                                                 /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = divide(%7, %8)                   # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = 0                                # ClearScalar<uint1>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %11 = add(%9, %10)                     # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %13 = 0                                # ClearScalar<uint1>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %14 = 511                              # ClearScalar<uint9>                                                                                   /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %15 = clip(%12, %13, %14)              # EncryptedTensor<float64, shape=(1, 512, 1, 1)>                                                       /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %16 = astype(%15, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512, 1, 1)>                                                         /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %16

    %216 = subgraph(%215):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 512)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantized_ops.py:2025
         %1 = 0.0                            # ClearScalar<float64>                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 512)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %3 = 0.012284751328555004           # ClearScalar<float64>                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 512)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:743
         %5 = 0.049429196290485096           # ClearScalar<float64>                                    /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %6 = divide(%4, %5)                 # EncryptedTensor<float64, shape=(1, 512)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %7 = 0                              # ClearScalar<uint1>                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %8 = add(%6, %7)                    # EncryptedTensor<float64, shape=(1, 512)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 512)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:699
        %10 = 0                              # ClearScalar<uint1>                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %11 = 127                            # ClearScalar<uint7>                                      /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %12 = clip(%9, %10, %11)             # EncryptedTensor<float64, shape=(1, 512)>                /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:715
        %13 = astype(%12, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 512)>                  /usr/local/lib/python3.8/dist-packages/concrete/ml/quantization/quantizers.py:717
        return %13